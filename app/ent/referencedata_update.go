// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/predicate"
	"github.com/jhole89/orbital/ent/referencedata"
)

// ReferenceDataUpdate is the builder for updating ReferenceData entities.
type ReferenceDataUpdate struct {
	config
	hooks      []Hook
	mutation   *ReferenceDataMutation
	predicates []predicate.ReferenceData
}

// Where adds a new predicate for the builder.
func (rdu *ReferenceDataUpdate) Where(ps ...predicate.ReferenceData) *ReferenceDataUpdate {
	rdu.predicates = append(rdu.predicates, ps...)
	return rdu
}

// Mutation returns the ReferenceDataMutation object of the builder.
func (rdu *ReferenceDataUpdate) Mutation() *ReferenceDataMutation {
	return rdu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rdu *ReferenceDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rdu.hooks) == 0 {
		affected, err = rdu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferenceDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rdu.mutation = mutation
			affected, err = rdu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rdu.hooks) - 1; i >= 0; i-- {
			mut = rdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *ReferenceDataUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *ReferenceDataUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *ReferenceDataUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdu *ReferenceDataUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := rdu.gremlin().Query()
	if err := rdu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (rdu *ReferenceDataUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(referencedata.Label)
	for _, p := range rdu.predicates {
		p(v)
	}
	var (
		trs []*dsl.Traversal
	)
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// ReferenceDataUpdateOne is the builder for updating a single ReferenceData entity.
type ReferenceDataUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReferenceDataMutation
}

// Mutation returns the ReferenceDataMutation object of the builder.
func (rduo *ReferenceDataUpdateOne) Mutation() *ReferenceDataMutation {
	return rduo.mutation
}

// Save executes the query and returns the updated entity.
func (rduo *ReferenceDataUpdateOne) Save(ctx context.Context) (*ReferenceData, error) {
	var (
		err  error
		node *ReferenceData
	)
	if len(rduo.hooks) == 0 {
		node, err = rduo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferenceDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rduo.mutation = mutation
			node, err = rduo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rduo.hooks) - 1; i >= 0; i-- {
			mut = rduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *ReferenceDataUpdateOne) SaveX(ctx context.Context) *ReferenceData {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *ReferenceDataUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *ReferenceDataUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rduo *ReferenceDataUpdateOne) gremlinSave(ctx context.Context) (*ReferenceData, error) {
	res := &gremlin.Response{}
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReferenceData.ID for update")}
	}
	query, bindings := rduo.gremlin(id).Query()
	if err := rduo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rd := &ReferenceData{config: rduo.config}
	if err := rd.FromResponse(res); err != nil {
		return nil, err
	}
	return rd, nil
}

func (rduo *ReferenceDataUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		trs []*dsl.Traversal
	)
	v.ValueMap(true)
	trs = append(trs, v)
	return dsl.Join(trs...)
}
