// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/metadata"
	"github.com/jhole89/orbital/ent/predicate"
)

// MetaDataUpdate is the builder for updating MetaData entities.
type MetaDataUpdate struct {
	config
	hooks      []Hook
	mutation   *MetaDataMutation
	predicates []predicate.MetaData
}

// Where adds a new predicate for the builder.
func (mdu *MetaDataUpdate) Where(ps ...predicate.MetaData) *MetaDataUpdate {
	mdu.predicates = append(mdu.predicates, ps...)
	return mdu
}

// Mutation returns the MetaDataMutation object of the builder.
func (mdu *MetaDataUpdate) Mutation() *MetaDataMutation {
	return mdu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mdu *MetaDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mdu.hooks) == 0 {
		affected, err = mdu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetaDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mdu.mutation = mutation
			affected, err = mdu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mdu.hooks) - 1; i >= 0; i-- {
			mut = mdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MetaDataUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MetaDataUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MetaDataUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mdu *MetaDataUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := mdu.gremlin().Query()
	if err := mdu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (mdu *MetaDataUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(metadata.Label)
	for _, p := range mdu.predicates {
		p(v)
	}
	var (
		trs []*dsl.Traversal
	)
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// MetaDataUpdateOne is the builder for updating a single MetaData entity.
type MetaDataUpdateOne struct {
	config
	hooks    []Hook
	mutation *MetaDataMutation
}

// Mutation returns the MetaDataMutation object of the builder.
func (mduo *MetaDataUpdateOne) Mutation() *MetaDataMutation {
	return mduo.mutation
}

// Save executes the query and returns the updated entity.
func (mduo *MetaDataUpdateOne) Save(ctx context.Context) (*MetaData, error) {
	var (
		err  error
		node *MetaData
	)
	if len(mduo.hooks) == 0 {
		node, err = mduo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetaDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mduo.mutation = mutation
			node, err = mduo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mduo.hooks) - 1; i >= 0; i-- {
			mut = mduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MetaDataUpdateOne) SaveX(ctx context.Context) *MetaData {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MetaDataUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MetaDataUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mduo *MetaDataUpdateOne) gremlinSave(ctx context.Context) (*MetaData, error) {
	res := &gremlin.Response{}
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MetaData.ID for update")}
	}
	query, bindings := mduo.gremlin(id).Query()
	if err := mduo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	md := &MetaData{config: mduo.config}
	if err := md.FromResponse(res); err != nil {
		return nil, err
	}
	return md, nil
}

func (mduo *MetaDataUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		trs []*dsl.Traversal
	)
	v.ValueMap(true)
	trs = append(trs, v)
	return dsl.Join(trs...)
}
