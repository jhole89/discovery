// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/gremlin"
)

// ReferenceData is the model entity for the ReferenceData schema.
type ReferenceData struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// FromResponse scans the gremlin response data into ReferenceData.
func (rd *ReferenceData) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanrd struct {
		ID int `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanrd); err != nil {
		return err
	}
	rd.ID = scanrd.ID
	return nil
}

// Update returns a builder for updating this ReferenceData.
// Note that, you need to call ReferenceData.Unwrap() before calling this method, if this ReferenceData
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *ReferenceData) Update() *ReferenceDataUpdateOne {
	return (&ReferenceDataClient{config: rd.config}).UpdateOne(rd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rd *ReferenceData) Unwrap() *ReferenceData {
	tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReferenceData is not a transactional entity")
	}
	rd.config.driver = tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *ReferenceData) String() string {
	var builder strings.Builder
	builder.WriteString("ReferenceData(")
	builder.WriteString(fmt.Sprintf("id=%v", rd.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ReferenceDataSlice is a parsable slice of ReferenceData.
type ReferenceDataSlice []*ReferenceData

// FromResponse scans the gremlin response data into ReferenceDataSlice.
func (rd *ReferenceDataSlice) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanrd []struct {
		ID int `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanrd); err != nil {
		return err
	}
	for _, v := range scanrd {
		*rd = append(*rd, &ReferenceData{
			ID: v.ID,
		})
	}
	return nil
}

func (rd ReferenceDataSlice) config(cfg config) {
	for _i := range rd {
		rd[_i].config = cfg
	}
}
