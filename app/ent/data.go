// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/gremlin"
)

// Data is the model entity for the Data schema.
type Data struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DataQuery when eager-loading is set.
	Edges DataEdges `json:"edges"`
}

// DataEdges holds the relations/edges for other nodes in the graph.
type DataEdges struct {
	// HasTable holds the value of the has_table edge.
	HasTable []*Data
	// HasField holds the value of the has_field edge.
	HasField []*Data
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HasTableOrErr returns the HasTable value or an error if the edge
// was not loaded in eager-loading.
func (e DataEdges) HasTableOrErr() ([]*Data, error) {
	if e.loadedTypes[0] {
		return e.HasTable, nil
	}
	return nil, &NotLoadedError{edge: "has_table"}
}

// HasFieldOrErr returns the HasField value or an error if the edge
// was not loaded in eager-loading.
func (e DataEdges) HasFieldOrErr() ([]*Data, error) {
	if e.loadedTypes[1] {
		return e.HasField, nil
	}
	return nil, &NotLoadedError{edge: "has_field"}
}

// FromResponse scans the gremlin response data into Data.
func (d *Data) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scand struct {
		ID      int    `json:"id,omitempty"`
		Name    string `json:"name,omitempty"`
		Context string `json:"context,omitempty"`
	}
	if err := vmap.Decode(&scand); err != nil {
		return err
	}
	d.ID = scand.ID
	d.Name = scand.Name
	d.Context = scand.Context
	return nil
}

// QueryHasTable queries the has_table edge of the Data.
func (d *Data) QueryHasTable() *DataQuery {
	return (&DataClient{config: d.config}).QueryHasTable(d)
}

// QueryHasField queries the has_field edge of the Data.
func (d *Data) QueryHasField() *DataQuery {
	return (&DataClient{config: d.config}).QueryHasField(d)
}

// Update returns a builder for updating this Data.
// Note that, you need to call Data.Unwrap() before calling this method, if this Data
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Data) Update() *DataUpdateOne {
	return (&DataClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Data) Unwrap() *Data {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Data is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Data) String() string {
	var builder strings.Builder
	builder.WriteString("Data(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", context=")
	builder.WriteString(d.Context)
	builder.WriteByte(')')
	return builder.String()
}

// DataSlice is a parsable slice of Data.
type DataSlice []*Data

// FromResponse scans the gremlin response data into DataSlice.
func (d *DataSlice) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scand []struct {
		ID      int    `json:"id,omitempty"`
		Name    string `json:"name,omitempty"`
		Context string `json:"context,omitempty"`
	}
	if err := vmap.Decode(&scand); err != nil {
		return err
	}
	for _, v := range scand {
		*d = append(*d, &Data{
			ID:      v.ID,
			Name:    v.Name,
			Context: v.Context,
		})
	}
	return nil
}

func (d DataSlice) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
