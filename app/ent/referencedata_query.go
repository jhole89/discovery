// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/predicate"
	"github.com/jhole89/orbital/ent/referencedata"
)

// ReferenceDataQuery is the builder for querying ReferenceData entities.
type ReferenceDataQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ReferenceData
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the builder.
func (rdq *ReferenceDataQuery) Where(ps ...predicate.ReferenceData) *ReferenceDataQuery {
	rdq.predicates = append(rdq.predicates, ps...)
	return rdq
}

// Limit adds a limit step to the query.
func (rdq *ReferenceDataQuery) Limit(limit int) *ReferenceDataQuery {
	rdq.limit = &limit
	return rdq
}

// Offset adds an offset step to the query.
func (rdq *ReferenceDataQuery) Offset(offset int) *ReferenceDataQuery {
	rdq.offset = &offset
	return rdq
}

// Order adds an order step to the query.
func (rdq *ReferenceDataQuery) Order(o ...OrderFunc) *ReferenceDataQuery {
	rdq.order = append(rdq.order, o...)
	return rdq
}

// First returns the first ReferenceData entity in the query. Returns *NotFoundError when no referencedata was found.
func (rdq *ReferenceDataQuery) First(ctx context.Context) (*ReferenceData, error) {
	nodes, err := rdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{referencedata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rdq *ReferenceDataQuery) FirstX(ctx context.Context) *ReferenceData {
	node, err := rdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReferenceData id in the query. Returns *NotFoundError when no id was found.
func (rdq *ReferenceDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{referencedata.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (rdq *ReferenceDataQuery) FirstXID(ctx context.Context) int {
	id, err := rdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ReferenceData entity in the query, returns an error if not exactly one entity was returned.
func (rdq *ReferenceDataQuery) Only(ctx context.Context) (*ReferenceData, error) {
	nodes, err := rdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{referencedata.Label}
	default:
		return nil, &NotSingularError{referencedata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rdq *ReferenceDataQuery) OnlyX(ctx context.Context) *ReferenceData {
	node, err := rdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ReferenceData id in the query, returns an error if not exactly one id was returned.
func (rdq *ReferenceDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = &NotSingularError{referencedata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rdq *ReferenceDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := rdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReferenceDataSlice.
func (rdq *ReferenceDataQuery) All(ctx context.Context) ([]*ReferenceData, error) {
	if err := rdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rdq.gremlinAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rdq *ReferenceDataQuery) AllX(ctx context.Context) []*ReferenceData {
	nodes, err := rdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReferenceData ids.
func (rdq *ReferenceDataQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rdq.Select(referencedata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rdq *ReferenceDataQuery) IDsX(ctx context.Context) []int {
	ids, err := rdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rdq *ReferenceDataQuery) Count(ctx context.Context) (int, error) {
	if err := rdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rdq.gremlinCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rdq *ReferenceDataQuery) CountX(ctx context.Context) int {
	count, err := rdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rdq *ReferenceDataQuery) Exist(ctx context.Context) (bool, error) {
	if err := rdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rdq.gremlinExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rdq *ReferenceDataQuery) ExistX(ctx context.Context) bool {
	exist, err := rdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rdq *ReferenceDataQuery) Clone() *ReferenceDataQuery {
	return &ReferenceDataQuery{
		config:     rdq.config,
		limit:      rdq.limit,
		offset:     rdq.offset,
		order:      append([]OrderFunc{}, rdq.order...),
		unique:     append([]string{}, rdq.unique...),
		predicates: append([]predicate.ReferenceData{}, rdq.predicates...),
		// clone intermediate query.
		gremlin: rdq.gremlin.Clone(),
		path:    rdq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (rdq *ReferenceDataQuery) GroupBy(field string, fields ...string) *ReferenceDataGroupBy {
	group := &ReferenceDataGroupBy{config: rdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *dsl.Traversal, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rdq.gremlinQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (rdq *ReferenceDataQuery) Select(field string, fields ...string) *ReferenceDataSelect {
	selector := &ReferenceDataSelect{config: rdq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *dsl.Traversal, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rdq.gremlinQuery(), nil
	}
	return selector
}

func (rdq *ReferenceDataQuery) prepareQuery(ctx context.Context) error {
	if rdq.path != nil {
		prev, err := rdq.path(ctx)
		if err != nil {
			return err
		}
		rdq.gremlin = prev
	}
	return nil
}

func (rdq *ReferenceDataQuery) gremlinAll(ctx context.Context) ([]*ReferenceData, error) {
	res := &gremlin.Response{}
	query, bindings := rdq.gremlinQuery().ValueMap(true).Query()
	if err := rdq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var rds ReferenceDataSlice
	if err := rds.FromResponse(res); err != nil {
		return nil, err
	}
	rds.config(rdq.config)
	return rds, nil
}

func (rdq *ReferenceDataQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := rdq.gremlinQuery().Count().Query()
	if err := rdq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (rdq *ReferenceDataQuery) gremlinExist(ctx context.Context) (bool, error) {
	res := &gremlin.Response{}
	query, bindings := rdq.gremlinQuery().HasNext().Query()
	if err := rdq.driver.Exec(ctx, query, bindings, res); err != nil {
		return false, err
	}
	return res.ReadBool()
}

func (rdq *ReferenceDataQuery) gremlinQuery() *dsl.Traversal {
	v := g.V().HasLabel(referencedata.Label)
	if rdq.gremlin != nil {
		v = rdq.gremlin.Clone()
	}
	for _, p := range rdq.predicates {
		p(v)
	}
	if len(rdq.order) > 0 {
		v.Order()
		for _, p := range rdq.order {
			p(v)
		}
	}
	switch limit, offset := rdq.limit, rdq.offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := rdq.unique; len(unique) == 0 {
		v.Dedup()
	}
	return v
}

// ReferenceDataGroupBy is the builder for group-by ReferenceData entities.
type ReferenceDataGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rdgb *ReferenceDataGroupBy) Aggregate(fns ...AggregateFunc) *ReferenceDataGroupBy {
	rdgb.fns = append(rdgb.fns, fns...)
	return rdgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rdgb *ReferenceDataGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rdgb.path(ctx)
	if err != nil {
		return err
	}
	rdgb.gremlin = query
	return rdgb.gremlinScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rdgb.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) StringsX(ctx context.Context) []string {
	v, err := rdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) StringX(ctx context.Context) string {
	v, err := rdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rdgb.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) IntsX(ctx context.Context) []int {
	v, err := rdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) IntX(ctx context.Context) int {
	v, err := rdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rdgb.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rdgb.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rdgb *ReferenceDataGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rdgb *ReferenceDataGroupBy) BoolX(ctx context.Context) bool {
	v, err := rdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rdgb *ReferenceDataGroupBy) gremlinScan(ctx context.Context, v interface{}) error {
	res := &gremlin.Response{}
	query, bindings := rdgb.gremlinQuery().Query()
	if err := rdgb.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(rdgb.fields)+len(rdgb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

func (rdgb *ReferenceDataGroupBy) gremlinQuery() *dsl.Traversal {
	var (
		trs   []interface{}
		names []interface{}
	)
	for _, fn := range rdgb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range rdgb.fields {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	return rdgb.gremlin.Group().
		By(__.Values(rdgb.fields...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next()
}

// ReferenceDataSelect is the builder for select fields of ReferenceData entities.
type ReferenceDataSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rds *ReferenceDataSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rds.path(ctx)
	if err != nil {
		return err
	}
	rds.gremlin = query
	return rds.gremlinScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rds *ReferenceDataSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rds.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rds *ReferenceDataSelect) StringsX(ctx context.Context) []string {
	v, err := rds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rds *ReferenceDataSelect) StringX(ctx context.Context) string {
	v, err := rds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rds.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rds *ReferenceDataSelect) IntsX(ctx context.Context) []int {
	v, err := rds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rds *ReferenceDataSelect) IntX(ctx context.Context) int {
	v, err := rds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rds.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rds *ReferenceDataSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rds *ReferenceDataSelect) Float64X(ctx context.Context) float64 {
	v, err := rds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rds.fields) > 1 {
		return nil, errors.New("ent: ReferenceDataSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rds *ReferenceDataSelect) BoolsX(ctx context.Context) []bool {
	v, err := rds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rds *ReferenceDataSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{referencedata.Label}
	default:
		err = fmt.Errorf("ent: ReferenceDataSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rds *ReferenceDataSelect) BoolX(ctx context.Context) bool {
	v, err := rds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rds *ReferenceDataSelect) gremlinScan(ctx context.Context, v interface{}) error {
	var (
		traversal *dsl.Traversal
		res       = &gremlin.Response{}
	)
	if len(rds.fields) == 1 {
		if rds.fields[0] != referencedata.FieldID {
			traversal = rds.gremlin.Values(rds.fields...)
		} else {
			traversal = rds.gremlin.ID()
		}
	} else {
		fields := make([]interface{}, len(rds.fields))
		for i, f := range rds.fields {
			fields[i] = f
		}
		traversal = rds.gremlin.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := rds.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(rds.fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
