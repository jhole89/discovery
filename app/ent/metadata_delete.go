// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/metadata"
	"github.com/jhole89/orbital/ent/predicate"
)

// MetaDataDelete is the builder for deleting a MetaData entity.
type MetaDataDelete struct {
	config
	hooks      []Hook
	mutation   *MetaDataMutation
	predicates []predicate.MetaData
}

// Where adds a new predicate to the delete builder.
func (mdd *MetaDataDelete) Where(ps ...predicate.MetaData) *MetaDataDelete {
	mdd.predicates = append(mdd.predicates, ps...)
	return mdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mdd *MetaDataDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mdd.hooks) == 0 {
		affected, err = mdd.gremlinExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetaDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mdd.mutation = mutation
			affected, err = mdd.gremlinExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mdd.hooks) - 1; i >= 0; i-- {
			mut = mdd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdd *MetaDataDelete) ExecX(ctx context.Context) int {
	n, err := mdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mdd *MetaDataDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := mdd.gremlin().Query()
	if err := mdd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (mdd *MetaDataDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(metadata.Label)
	for _, p := range mdd.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// MetaDataDeleteOne is the builder for deleting a single MetaData entity.
type MetaDataDeleteOne struct {
	mdd *MetaDataDelete
}

// Exec executes the deletion query.
func (mddo *MetaDataDeleteOne) Exec(ctx context.Context) error {
	n, err := mddo.mdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{metadata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mddo *MetaDataDeleteOne) ExecX(ctx context.Context) {
	mddo.mdd.ExecX(ctx)
}
