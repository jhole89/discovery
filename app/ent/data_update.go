// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/data"
	"github.com/jhole89/orbital/ent/predicate"
)

// DataUpdate is the builder for updating Data entities.
type DataUpdate struct {
	config
	hooks      []Hook
	mutation   *DataMutation
	predicates []predicate.Data
}

// Where adds a new predicate for the builder.
func (du *DataUpdate) Where(ps ...predicate.Data) *DataUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DataUpdate) SetName(s string) *DataUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the name field if the given value is not nil.
func (du *DataUpdate) SetNillableName(s *string) *DataUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetContext sets the context field.
func (du *DataUpdate) SetContext(s string) *DataUpdate {
	du.mutation.SetContext(s)
	return du
}

// SetNillableContext sets the context field if the given value is not nil.
func (du *DataUpdate) SetNillableContext(s *string) *DataUpdate {
	if s != nil {
		du.SetContext(*s)
	}
	return du
}

// AddHasTableIDs adds the has_table edge to Data by ids.
func (du *DataUpdate) AddHasTableIDs(ids ...int) *DataUpdate {
	du.mutation.AddHasTableIDs(ids...)
	return du
}

// AddHasTable adds the has_table edges to Data.
func (du *DataUpdate) AddHasTable(d ...*Data) *DataUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddHasTableIDs(ids...)
}

// AddHasFieldIDs adds the has_field edge to Data by ids.
func (du *DataUpdate) AddHasFieldIDs(ids ...int) *DataUpdate {
	du.mutation.AddHasFieldIDs(ids...)
	return du
}

// AddHasField adds the has_field edges to Data.
func (du *DataUpdate) AddHasField(d ...*Data) *DataUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddHasFieldIDs(ids...)
}

// Mutation returns the DataMutation object of the builder.
func (du *DataUpdate) Mutation() *DataMutation {
	return du.mutation
}

// ClearHasTable clears all "has_table" edges to type Data.
func (du *DataUpdate) ClearHasTable() *DataUpdate {
	du.mutation.ClearHasTable()
	return du
}

// RemoveHasTableIDs removes the has_table edge to Data by ids.
func (du *DataUpdate) RemoveHasTableIDs(ids ...int) *DataUpdate {
	du.mutation.RemoveHasTableIDs(ids...)
	return du
}

// RemoveHasTable removes has_table edges to Data.
func (du *DataUpdate) RemoveHasTable(d ...*Data) *DataUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveHasTableIDs(ids...)
}

// ClearHasField clears all "has_field" edges to type Data.
func (du *DataUpdate) ClearHasField() *DataUpdate {
	du.mutation.ClearHasField()
	return du
}

// RemoveHasFieldIDs removes the has_field edge to Data by ids.
func (du *DataUpdate) RemoveHasFieldIDs(ids ...int) *DataUpdate {
	du.mutation.RemoveHasFieldIDs(ids...)
	return du
}

// RemoveHasField removes has_field edges to Data.
func (du *DataUpdate) RemoveHasField(d ...*Data) *DataUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveHasFieldIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DataUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DataUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DataUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DataUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := du.gremlin().Query()
	if err := du.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (du *DataUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(data.Label)
	for _, p := range du.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := du.mutation.Name(); ok {
		v.Property(dsl.Single, data.FieldName, value)
	}
	if value, ok := du.mutation.Context(); ok {
		v.Property(dsl.Single, data.FieldContext, value)
	}
	for _, id := range du.mutation.RemovedHasTableIDs() {
		tr := rv.Clone().BothE(data.HasTableLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range du.mutation.HasTableIDs() {
		v.AddE(data.HasTableLabel).To(g.V(id)).OutV()
	}
	for _, id := range du.mutation.RemovedHasFieldIDs() {
		tr := rv.Clone().BothE(data.HasFieldLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range du.mutation.HasFieldIDs() {
		v.AddE(data.HasFieldLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// DataUpdateOne is the builder for updating a single Data entity.
type DataUpdateOne struct {
	config
	hooks    []Hook
	mutation *DataMutation
}

// SetName sets the name field.
func (duo *DataUpdateOne) SetName(s string) *DataUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the name field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableName(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetContext sets the context field.
func (duo *DataUpdateOne) SetContext(s string) *DataUpdateOne {
	duo.mutation.SetContext(s)
	return duo
}

// SetNillableContext sets the context field if the given value is not nil.
func (duo *DataUpdateOne) SetNillableContext(s *string) *DataUpdateOne {
	if s != nil {
		duo.SetContext(*s)
	}
	return duo
}

// AddHasTableIDs adds the has_table edge to Data by ids.
func (duo *DataUpdateOne) AddHasTableIDs(ids ...int) *DataUpdateOne {
	duo.mutation.AddHasTableIDs(ids...)
	return duo
}

// AddHasTable adds the has_table edges to Data.
func (duo *DataUpdateOne) AddHasTable(d ...*Data) *DataUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddHasTableIDs(ids...)
}

// AddHasFieldIDs adds the has_field edge to Data by ids.
func (duo *DataUpdateOne) AddHasFieldIDs(ids ...int) *DataUpdateOne {
	duo.mutation.AddHasFieldIDs(ids...)
	return duo
}

// AddHasField adds the has_field edges to Data.
func (duo *DataUpdateOne) AddHasField(d ...*Data) *DataUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddHasFieldIDs(ids...)
}

// Mutation returns the DataMutation object of the builder.
func (duo *DataUpdateOne) Mutation() *DataMutation {
	return duo.mutation
}

// ClearHasTable clears all "has_table" edges to type Data.
func (duo *DataUpdateOne) ClearHasTable() *DataUpdateOne {
	duo.mutation.ClearHasTable()
	return duo
}

// RemoveHasTableIDs removes the has_table edge to Data by ids.
func (duo *DataUpdateOne) RemoveHasTableIDs(ids ...int) *DataUpdateOne {
	duo.mutation.RemoveHasTableIDs(ids...)
	return duo
}

// RemoveHasTable removes has_table edges to Data.
func (duo *DataUpdateOne) RemoveHasTable(d ...*Data) *DataUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveHasTableIDs(ids...)
}

// ClearHasField clears all "has_field" edges to type Data.
func (duo *DataUpdateOne) ClearHasField() *DataUpdateOne {
	duo.mutation.ClearHasField()
	return duo
}

// RemoveHasFieldIDs removes the has_field edge to Data by ids.
func (duo *DataUpdateOne) RemoveHasFieldIDs(ids ...int) *DataUpdateOne {
	duo.mutation.RemoveHasFieldIDs(ids...)
	return duo
}

// RemoveHasField removes has_field edges to Data.
func (duo *DataUpdateOne) RemoveHasField(d ...*Data) *DataUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveHasFieldIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DataUpdateOne) Save(ctx context.Context) (*Data, error) {
	var (
		err  error
		node *Data
	)
	if len(duo.hooks) == 0 {
		node, err = duo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DataUpdateOne) SaveX(ctx context.Context) *Data {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DataUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DataUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DataUpdateOne) gremlinSave(ctx context.Context) (*Data, error) {
	res := &gremlin.Response{}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Data.ID for update")}
	}
	query, bindings := duo.gremlin(id).Query()
	if err := duo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	d := &Data{config: duo.config}
	if err := d.FromResponse(res); err != nil {
		return nil, err
	}
	return d, nil
}

func (duo *DataUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := duo.mutation.Name(); ok {
		v.Property(dsl.Single, data.FieldName, value)
	}
	if value, ok := duo.mutation.Context(); ok {
		v.Property(dsl.Single, data.FieldContext, value)
	}
	for _, id := range duo.mutation.RemovedHasTableIDs() {
		tr := rv.Clone().BothE(data.HasTableLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range duo.mutation.HasTableIDs() {
		v.AddE(data.HasTableLabel).To(g.V(id)).OutV()
	}
	for _, id := range duo.mutation.RemovedHasFieldIDs() {
		tr := rv.Clone().BothE(data.HasFieldLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range duo.mutation.HasFieldIDs() {
		v.AddE(data.HasFieldLabel).To(g.V(id)).OutV()
	}
	v.ValueMap(true)
	trs = append(trs, v)
	return dsl.Join(trs...)
}
