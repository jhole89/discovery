// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/gremlin"
)

// MetaData is the model entity for the MetaData schema.
type MetaData struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// FromResponse scans the gremlin response data into MetaData.
func (md *MetaData) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanmd struct {
		ID int `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanmd); err != nil {
		return err
	}
	md.ID = scanmd.ID
	return nil
}

// Update returns a builder for updating this MetaData.
// Note that, you need to call MetaData.Unwrap() before calling this method, if this MetaData
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *MetaData) Update() *MetaDataUpdateOne {
	return (&MetaDataClient{config: md.config}).UpdateOne(md)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (md *MetaData) Unwrap() *MetaData {
	tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetaData is not a transactional entity")
	}
	md.config.driver = tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *MetaData) String() string {
	var builder strings.Builder
	builder.WriteString("MetaData(")
	builder.WriteString(fmt.Sprintf("id=%v", md.ID))
	builder.WriteByte(')')
	return builder.String()
}

// MetaDataSlice is a parsable slice of MetaData.
type MetaDataSlice []*MetaData

// FromResponse scans the gremlin response data into MetaDataSlice.
func (md *MetaDataSlice) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanmd []struct {
		ID int `json:"id,omitempty"`
	}
	if err := vmap.Decode(&scanmd); err != nil {
		return err
	}
	for _, v := range scanmd {
		*md = append(*md, &MetaData{
			ID: v.ID,
		})
	}
	return nil
}

func (md MetaDataSlice) config(cfg config) {
	for _i := range md {
		md[_i].config = cfg
	}
}
