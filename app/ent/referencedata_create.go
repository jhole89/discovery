// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/gremlin"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/g"
	"github.com/jhole89/orbital/ent/referencedata"
)

// ReferenceDataCreate is the builder for creating a ReferenceData entity.
type ReferenceDataCreate struct {
	config
	mutation *ReferenceDataMutation
	hooks    []Hook
}

// Mutation returns the ReferenceDataMutation object of the builder.
func (rdc *ReferenceDataCreate) Mutation() *ReferenceDataMutation {
	return rdc.mutation
}

// Save creates the ReferenceData in the database.
func (rdc *ReferenceDataCreate) Save(ctx context.Context) (*ReferenceData, error) {
	var (
		err  error
		node *ReferenceData
	)
	if len(rdc.hooks) == 0 {
		if err = rdc.check(); err != nil {
			return nil, err
		}
		node, err = rdc.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferenceDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rdc.check(); err != nil {
				return nil, err
			}
			rdc.mutation = mutation
			node, err = rdc.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rdc.hooks) - 1; i >= 0; i-- {
			mut = rdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *ReferenceDataCreate) SaveX(ctx context.Context) *ReferenceData {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rdc *ReferenceDataCreate) check() error {
	return nil
}

func (rdc *ReferenceDataCreate) gremlinSave(ctx context.Context) (*ReferenceData, error) {
	res := &gremlin.Response{}
	query, bindings := rdc.gremlin().Query()
	if err := rdc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rd := &ReferenceData{config: rdc.config}
	if err := rd.FromResponse(res); err != nil {
		return nil, err
	}
	return rd, nil
}

func (rdc *ReferenceDataCreate) gremlin() *dsl.Traversal {
	v := g.AddV(referencedata.Label)
	return v.ValueMap(true)
}

// ReferenceDataCreateBulk is the builder for creating a bulk of ReferenceData entities.
type ReferenceDataCreateBulk struct {
	config
	builders []*ReferenceDataCreate
}
