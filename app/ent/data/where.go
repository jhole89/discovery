// Code generated by entc, DO NOT EDIT.

package data

import (
	"github.com/facebook/ent/dialect/gremlin/graph/dsl"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebook/ent/dialect/gremlin/graph/dsl/p"
	"github.com/jhole89/orbital/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(id)
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.EQ(id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.NEQ(id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		t.HasID(p.Within(v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		t.HasID(p.Without(v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.GT(id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.GTE(id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.LT(id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.HasID(p.LTE(id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.EQ(v))
	})
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.EQ(v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.EQ(v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.NEQ(v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.Within(v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.Without(v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.GT(v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.GTE(v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.LT(v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.LTE(v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.Containing(v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.StartingWith(v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldName, p.EndingWith(v))
	})
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.EQ(v))
	})
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.NEQ(v))
	})
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.Within(v...))
	})
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.Data {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.Without(v...))
	})
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.GT(v))
	})
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.GTE(v))
	})
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.LT(v))
	})
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.LTE(v))
	})
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.Containing(v))
	})
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.StartingWith(v))
	})
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Has(Label, FieldContext, p.EndingWith(v))
	})
}

// HasHasTable applies the HasEdge predicate on the "has_table" edge.
func HasHasTable() predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Both(HasTableLabel)
	})
}

// HasHasTableWith applies the HasEdge predicate on the "has_table" edge with a given conditions (other predicates).
func HasHasTableWith(preds ...predicate.Data) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		in, out := __.InV(), __.OutV()
		for _, p := range preds {
			p(in)
			p(out)
		}
		t.Where(
			__.Or(
				__.OutE(HasTableLabel).Where(in),
				__.InE(HasTableLabel).Where(out),
			),
		)
	})
}

// HasHasField applies the HasEdge predicate on the "has_field" edge.
func HasHasField() predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		t.Both(HasFieldLabel)
	})
}

// HasHasFieldWith applies the HasEdge predicate on the "has_field" edge with a given conditions (other predicates).
func HasHasFieldWith(preds ...predicate.Data) predicate.Data {
	return predicate.Data(func(t *dsl.Traversal) {
		in, out := __.InV(), __.OutV()
		for _, p := range preds {
			p(in)
			p(out)
		}
		t.Where(
			__.Or(
				__.OutE(HasFieldLabel).Where(in),
				__.InE(HasFieldLabel).Where(out),
			),
		)
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(func(tr *dsl.Traversal) {
		trs := make([]interface{}, 0, len(predicates))
		for _, p := range predicates {
			t := __.New()
			p(t)
			trs = append(trs, t)
		}
		tr.Where(__.And(trs...))
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Data) predicate.Data {
	return predicate.Data(func(tr *dsl.Traversal) {
		trs := make([]interface{}, 0, len(predicates))
		for _, p := range predicates {
			t := __.New()
			p(t)
			trs = append(trs, t)
		}
		tr.Where(__.Or(trs...))
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Data) predicate.Data {
	return predicate.Data(func(tr *dsl.Traversal) {
		t := __.New()
		p(t)
		tr.Where(__.Not(t))
	})
}
